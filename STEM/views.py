from django.shortcuts import render, redirect
from sklearn import tree
from .forms import EstudianteForm
from .models import Estudiante, Predecidos
from .serializers import EstudianteSerializer, PredecidosSerializer
from rest_framework import generics
from pylab import *

class estudianteRudView(generics.RetrieveUpdateDestroyAPIView):
    lookup_field = 'pk' #id
    serializer_class = EstudianteSerializer

    def get_queryset(self):
        return Estudiante.objects.all()

class estudianteFullList(generics.ListAPIView):
    lookup_field = 'pk' #id
    serializer_class = EstudianteSerializer

    def get_queryset(self):
        return Estudiante.objects.all()

class predecidosRudView(generics.RetrieveUpdateDestroyAPIView):
    lookup_field = 'pk' #id
    serializer_class = PredecidosSerializer

    def get_queryset(self):
        return Predecidos.objects.all()

class predecidosFullList(generics.ListAPIView):
    lookup_field = 'pk' #id
    serializer_class = PredecidosSerializer

    def get_queryset(self):
        return Predecidos.objects.all()

def index(request):
    return render(request, 'estudiante/index.html',)

def estudiante_view(request):

    form = EstudianteForm(request.POST)
    if form.is_valid():
        datos = form.cleaned_data
        genero = datos.get("genero")
        edad = datos.get("edad")
        grado = datos.get("grado")
        gpCiencia = datos.get("gpCiencia")
        gpTecnologia = datos.get("gpTecnologia")
        gpIngenieria = datos.get("gpIngenieria")
        gpMatematica = datos.get("gpMatematica")
        estrato = datos.get("estrato")
        vcMadre = datos.get("vcMadre")
        vcPadre = datos.get("vcPadre")
        numHermanos = datos.get("numHermanos")

        print("=========================================")
        print("Datos ingresados por el estudiante:")
        print(datos)
        print("=========================================")
        print("Resultados predecidos:")
        entrenar(x, y)
        print("El modelo ha sido entrenado")
        print("Presicion: ", probar(xp, yp))
        print("Datos a predecir: ", [genero, edad, grado, gpCiencia, gpTecnologia, gpIngenieria, gpMatematica, estrato, vcMadre, vcPadre, numHermanos])
        array = predecir([genero, edad, grado, gpCiencia, gpTecnologia, gpIngenieria, gpMatematica, estrato, vcMadre, vcPadre, numHermanos])
        print("=========================================")
        print("Prediccion: ", array)
        print("Interpretaci√≥n")
        interpretar(array)

        f = open('STEM/prediccion.csv', 'w')
        array1 = np.ravel(array, order='F')
        array2 = "".join(str(e) for e in array1)
        array3 = array2.replace(".0", ",")
        print("=========================================")
        print("Archivo csv:")
        print(array3)
        f.write(array3)
        f.close()
        print("=========================================")
        form.save()

        if request.method == 'POST':

            f = open('STEM/prediccion.csv', 'r')
            for line in f:
                line = line.split(',')
                pred = Predecidos()
                pred.PAU1C = line[0]
                pred.PFU1C = line[1]
                pred.PASOU1C = line[2]
                pred.PAU2C = line[3]
                pred.PFU2C = line[4]
                pred.PASOU2C = line[5]
                pred.PAU3C = line[6]
                pred.PFU3C = line[7]
                pred.PASOU3C = line[8]
                pred.PAU4C = line[9]
                pred.PFU4C = line[10]
                pred.PASOU4C = line[11]

                pred.PAU1T = line[12]
                pred.PFU1T = line[13]
                pred.PASOU1T = line[14]
                pred.PAU2T = line[15]
                pred.PFU2T = line[16]
                pred.PASOU2T = line[17]
                pred.PAU3T = line[18]
                pred.PFU3T = line[19]
                pred.PASOU3T = line[20]
                pred.PAU4T = line[21]
                pred.PFU4T = line[22]
                pred.PASOU4T = line[23]

                pred.PAU1I = line[24]
                pred.PFU1I = line[25]
                pred.PASOU1I = line[26]
                pred.PAU2I = line[27]
                pred.PFU2I = line[28]
                pred.PASOU2I = line[29]
                pred.PAU3I = line[30]
                pred.PFU3I = line[31]
                pred.PASOU3I = line[32]
                pred.PAU4I = line[33]
                pred.PFU4I = line[34]
                pred.PASOU4I = line[35]

                pred.PAU1M = line[36]
                pred.PFU1M = line[37]
                pred.PASOU1M = line[38]
                pred.PAU2M = line[39]
                pred.PFU2M = line[40]
                pred.PASOU2M = line[41]
                pred.PAU3M = line[42]
                pred.PFU3M = line[43]
                pred.PASOU3M = line[44]
                pred.PAU4M = line[45]
                pred.PFU4M = line[46]
                pred.PASOU4M = line[47]

                pred.save()

            f.close()

            return redirect('app-stem:listar_estudiantes')

    return render(request, 'estudiante/estudiante_form.html', {'form': form})

def estudiante_list(request):
    estudiante = Estudiante.objects.all()
    contexto = {'estudiantes': estudiante}

    return render(request, 'estudiante/estudiante_list.html', contexto)

x=[[1,2,9,1,2,3,2,2,1,0,1],[0,2,9,4,3,2,1,4,1,0,5],[1,3,9,2,4,2,1,2,1,0,2],
   [0,2,9,1,1,1,1,2,1,0,0],[0,3,9,3,1,2,4,3,1,1,0],[1,2,9,3,4,3,3,2,0,0,5],[1,2,9,4,3,1,2,2,0,1,1],
   [1,3,9,1,3,4,2,4,1,1,1],[1,2,9,3,1,2,4,3,1,1,2],[1,2,9,1,3,4,2,5,1,1,1],[0,3,9,4,2,2,1,4,1,0,1],
   [1,2,9,3,2,4,4,4,1,1,1],[0,3,9,2,4,4,1,3,1,0,1],[0,3,9,2,1,2,2,3,1,1,2],[1,2,9,1,2,3,2,2,1,0,1],
   [0,3,9,3,3,3,3,3,1,1,1],[1,2,9,3,3,1,1,3,1,1,2],[1,2,9,3,3,3,2,4,0,1,3],[1,3,9,2,1,4,4,3,1,0,3],
   [0,2,9,3,4,2,1,2,1,1,2],[0,2,9,3,4,3,2,3,1,1,2],[1,2,9,3,2,3,1,3,1,0,3],[1,2,9,2,1,3,3,3,1,1,1],
   [1,2,9,1,2,4,3,2,1,0,0],[0,2,10,3,4,4,4,3,1,0,2],[1,2,10,4,3,2,1,3,1,0,3],[0,3,10,2,4,4,3,2,1,1,3],
   [0,2,10,1,2,1,2,4,1,0,2],[0,2,10,1,4,4,1,2,1,0,2],[0,2,10,3,4,1,2,4,1,0,1],[0,2,10,2,4,3,4,4,0,1,1],
   [0,3,10,2,2,2,4,4,1,1,1],[0,2,10,3,3,2,3,2,1,1,1],[1,3,10,4,3,2,2,1,1,1,2],[0,3,10,3,4,3,2,3,1,1,1],
   [0,3,10,3,1,2,4,3,1,1,2],[0,3,10,4,4,4,4,3,1,1,2],[0,3,10,3,4,2,3,3,1,0,1],[1,2,10,3,4,4,3,2,1,0,4],
   [0,3,10,3,3,3,3,3,0,0,4],[0,3,10,1,1,1,1,4,1,1,0],[0,2,10,3,4,3,2,4,1,0,3],[0,2,10,1,4,3,4,2,1,1,2],
   [0,3,10,3,3,3,2,3,0,0,2],[0,2,10,1,4,3,4,4,1,1,2],[0,2,10,3,4,3,3,3,1,1,2],[0,2,10,3,4,2,3,2,1,1,2],
   [0,2,10,2,4,4,4,5,1,0,1],[0,2,10,3,4,4,3,2,1,1,0],[0,3,10,4,3,2,2,5,1,0,2],[1,2,10,2,3,4,1,4,1,1,0],
   [0,3,10,1,3,2,4,2,1,0,0],[1,3,10,1,3,4,2,3,1,0,1],[0,2,10,3,4,2,2,3,1,1,3],[1,1,6,1,2,1,2,2,1,1,2],
   [1,2,9,2,1,3,4,3,1,0,1],[1,2,9,4,1,2,4,2,1,1,1],[0,3,9,1,4,1,1,4,1,0,2],[1,2,9,3,2,1,1,2,0,0,2],
   [1,2,7,3,1,3,3,1,1,0,0],[1,2,9,2,3,2,1,2,1,0,1],[1,2,7,1,1,1,1,1,1,0,0],[1,2,10,2,3,2,3,3,1,1,1],
   [1,2,9,1,2,2,3,3,1,0,2],[1,3,11,2,3,2,2,2,0,0,2],[0,3,11,1,2,3,4,2,1,0,1],[0,3,11,3,4,4,3,3,1,0,2],
   [0,3,11,1,2,1,1,4,1,0,1]]

y=[[1,2,0,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,1,2,0,1,2,0,1,2,0,0,3,0,1,2,1,2,1,1,1,2,0],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,0,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1],
   [3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,3,0,1,2,1,1,0,3,0,3,0,1,1,2,1,3,0,1,1,2,0],
   [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,0,3,0,3,0,1,3,0,0,3,0,1,1,2,0],
   [2,1,1,3,0,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,2,1,1,1,2,0,1,2,0,1,2,0,2,1,1,2,1,1,1,2,0],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,0,3,0,3,0,1,3,0,1,2,1,1,3,0,1],
   [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,2,1,1,1,2,0,1,2,0,1,2,1,3,0,1,1,2,0],
   [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,1,2,0,2,1,1,2,1,1],
   [3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,1,2,0,3,0,1,3,0,0,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,1,2,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,0,3,0,1,3,0,1],
   [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,1,2,0,1,2,1,3,0,1,2,1,1],
   [1,2,0,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,1,2,0,0,3,0,3,0,1,3,0,0,3,0,1,2,1,1],
   [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,3,0,1,1,2,0,1,2,0,1,2,1,3,0,1,3,0,1],
   [3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,0,3,0,3,0,1,3,0,0,3,0,1,2,1,1],
   [2,1,1,2,1,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,2,1,1,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,0,3,0],
   [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,0,3,0,2,1,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,3,0,1,2,1,1,1,2,0,1,2,0,2,1,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1],
   [3,0,1,2,1,1,1,2,0,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,0,2,1,1,1,2,0,3,0,1,2,1,1,2,1,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1],
   [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,0,3,0,1,2,0,3,0,1,2,1,1,3,0,1],
   [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,2,1,1,1,2,0],
   [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,1,2,0,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,2,1,1],
   [2,1,1,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,1,2,0,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,1,2,0],
   [3,0,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,1,2,0,3,0,1,1,2,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,3,0,0,3,0,1,2,1,1],
   [3,0,1,3,0,1,1,2,0,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [1,2,0,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [1,2,0,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,0,3,0,3,0,1,3,0,1,2,1,1,1,2,0],
   [2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,0,3,0,2,1,1,1,2,0,1,2,0,3,0,1,2,1,1,1,2,0],
   [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,1,2,0],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1],
   [2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,3,0,1],
   [2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,0,3,0,3,0,1,2,1,1,3,0,1,3,0,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,1,2,0,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1],
   [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,0,3,0,3,0,1,2,1,1,2,1,1,2,1,1],
   [2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,1,2,0,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,2,1,1],
   [0,3,0,2,1,1,1,2,0,2,1,1,3,0,1,1,2,0,2,1,1,1,2,0,2,1,1,2,1,1,2,1,1,1,2,0,1,2,0,2,1,1,2,1,1,1,2,0],
   [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,2,1,1,1,2,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,0,3,0,2,1,1,2,1,0,3,0,1,3,0,1],
   [2,1,1,1,2,0,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,1,2,1,1,2,0,2,1,1],
   [3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,1,2,0,2,1,0,3,0,1,2,1,1],
   [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,1,2,0],
   [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,0,3,0,3,0,1,2,1,1,2,1,1,3,0,1],
   [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,3,0,1,1,2,1,3,0,1,2,1,1],
   [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,0,3,0,1,1,2,0],
   [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,2,1,1,0,3,0,3,0,1,3,0,1,3,0,1,1,2,0],
   [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,1,2,1,2,1,1,1,2,0],
   [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,0,3,0,1,1,2,0],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,1,3,0,1,2,1,1],
   [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,0,2,1,1,1,2,0]]

xp=[[0,3,11,4,3,2,3,4,1,1,1],[1,2,11,1,1,1,3,2,1,1,1],[0,2,11,4,4,4,4,3,0,0,0],[0,3,11,1,2,3,1,4,1,0,3],
    [0,2,11,3,3,3,4,4,1,1,1],[0,3,11,1,4,3,2,1,1,1,0],[0,3,11,3,4,4,3,3,1,1,1],[0,3,11,2,1,3,4,4,1,1,2],
    [0,3,11,2,1,3,4,4,1,1,0],[0,3,11,3,4,4,3,5,0,1,1],[0,3,11,4,4,4,4,5,1,1,1],[1,3,11,2,4,1,2,4,1,1,1],
    [1,3,11,4,4,1,3,4,1,1,1],[1,2,8,2,2,2,3,2,1,1,3],[1,1,6,1,3,2,4,1,0,1,2],[0,1,6,2,2,2,2,1,1,1,2],
    [1,3,11,1,1,3,2,3,1,0,2],[1,3,11,1,2,3,3,2,1,0,1],[1,3,11,3,2,3,1,3,1,0,2],[0,3,11,4,4,4,4,3,1,0,1],
    [1,1,6,1,4,3,2,4,1,1,3],[0,3,10,4,4,3,3,3,1,0,4],[0,3,11,3,4,4,3,3,1,0,2],[0,3,11,1,2,1,1,4,1,0,1],
    [1,3,11,2,3,2,2,2,0,0,2],[0,3,11,1,2,3,4,2,1,0,1]]

yp=[[2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1],
    [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,2,1,1,1,2,0],
    [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0],
    [1,2,0,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1],
    [2,1,1,3,0,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1],
    [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1],
    [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1],
    [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,1,2,0,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1],
    [2,1,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1],
    [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1],
    [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1],
    [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,1,2,1,3,0,1,1,2,0],
    [3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,3,0,0,3,0,1,2,1,1],
    [2,1,1,2,1,1,0,3,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1],
    [2,1,1,2,1,1,0,3,0,2,1,1,2,1,1,1,2,0,2,1,1,1,2,0,2,1,1,2,1,1,0,3,0,1,2,0,1,2,0,1,2,1,2,1,1,1,2,0],
    [3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,0,2,1,1,0,3,0,3,0,1,2,1,1,1,2,0,0,3,0,1,2,0,2,1,0,0,3,0,2,1,1],
    [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,3,0,1,2,1,1,3,0,1,2,1,1],
    [2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,0,3,0,3,0,1,3,0,1,1,2,0,0,3,0],
    [3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,1,2,0,2,1,1,2,1,1,3,0,1,2,1,1,1,2,0,0,3,0,1,2,0,3,0,1,0,3,0,2,1,1],
    [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,1,3,0,1,2,1,1],
    [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,2,1,1,2,1,1,2,1,1,2,1,1,3,0,1,1,2,0,2,1,1,2,1,1,2,1,0,1,2,0,0,3,0],
    [2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,1,2,0,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,1],
    [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,1,2,1,3,0,1,2,1,1],
    [2,1,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,3,0,1,2,1,1,3,0,1,3,0,0,2,1,1,1,2,0],
    [2,1,1,2,1,1,1,2,0,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,1,2,0,3,0,1,1,2,1,2,1,1,1,2,0],
    [3,0,1,3,0,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,2,1,1,2,1,1,3,0,1,3,0,1,3,0,1,3,0,0,3,0,1,1,2,0]]

clasif = tree.DecisionTreeClassifier()  # crea un variable con todos los atributos y metodos del arbol clasificador
z = ['U1C', 'U2C', 'U3C', 'U4C', 'U1T', 'U2T','U3T', 'U4T', 'U1I', 'U2I', 'U3I', 'U4I', 'U1M', 'U2M', 'U3M', 'U4M']

def entrenar(entrada,salida):
    global clasif
    clasif = clasif.fit(entrada,salida)  # entrena el modelos con 2 matrices dadas (de 11 y 49 datos)

def predecir(datoPredecir):
    global clasif
    return clasif.predict([datoPredecir])  # predice desempeno en base a un dato entrada

def interpretar(x):	 # interpreta la prediccion obtenida, la resive como parametro
    i = 2
    y = []
    while i < len(x[0]):
        if x[0][i] > 0.0:
            y.append('-')
        else:
            y.append('Reforzar')
        i = i+3
    i = 0
    while i < len(z):
        print(y[i], z[i])
        i = i+1

def probar(entrada,salida): #dadas 2 matrices (20% de los datos) prueba que tan preciso es el modelo
    i = 0
    cantDatosIguales = 0
    for dato in entrada:
        array = predecir(dato)
        cantDatosIguales = cantDatosIguales + probarIgualdad(array[0], salida[i])
        i = i+1
    size = len(salida)*48
    presicion = (cantDatosIguales+0.0)/(size+0.0)
    return presicion

def probarIgualdad(array1,array2): #este metodo sirve como apoyo al metodo probar compara 2 arrays
    cantDatosIgu = 0
    i = 0
    while i < len(array1):
        a = int(array1[i])
        b = int(array2[i])
        if a == b:
            cantDatosIgu = cantDatosIgu+1
        #else:
        #print(array1[i], array2[i])
        i = i+1
    return cantDatosIgu
